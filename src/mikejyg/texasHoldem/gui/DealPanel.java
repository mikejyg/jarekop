/*
	Copyright 2012 Junyang Gu

	This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


package mikejyg.texasHoldem.gui;

import java.io.IOException;

import javax.swing.JFrame;
import javax.swing.SwingUtilities;

import mikejyg.texasHoldem.Dealer;

import org.apache.log4j.Logger;

/*
 * template generated by netbeans  
 */

/**
 * A panel showing cards and provide controls.
 * 
 * use model-view-controller architecture
 * 
 * this is the controller (deal button)
 * 
 */
public class DealPanel extends javax.swing.JPanel {

	static Logger logger = Logger.getLogger(DealPanel.class); 
	
    /** Creates new form dealPanel 
     * @throws IOException */
    public DealPanel() throws IOException {
        initComponents();
        
        ////////////////////
        // custom init
        
        // a default dealer
        dealer = new Dealer();
        dealer.addObserver(drawPanel);
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     * @throws IOException 
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() throws IOException {

        drawPanel = new TableDrawPanel();
        handsComboBox = new javax.swing.JComboBox();
        dealButton = new javax.swing.JButton();

        javax.swing.GroupLayout drawPanelLayout = new javax.swing.GroupLayout(drawPanel);
        drawPanel.setLayout(drawPanelLayout);
        drawPanelLayout.setHorizontalGroup(
            drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        drawPanelLayout.setVerticalGroup(
            drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 255, Short.MAX_VALUE)
        );

        handsComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1 hand", "2 hands", "3 hands", "4 hands", "5 hands", "6 hands", "7 hands", "8 hands", "9 hands" }));
        handsComboBox.setSelectedIndex(8);

        dealButton.setText("Deal");
        dealButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					dealButtonActionPerformed(evt);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(256, Short.MAX_VALUE)
                .addComponent(handsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(dealButton)
                .addContainerGap())
            .addComponent(drawPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(drawPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dealButton)
                    .addComponent(handsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>

    private void dealButtonActionPerformed(java.awt.event.ActionEvent evt) throws InterruptedException {
    	deal();
    }
    
    // Variables declaration - do not modify
    private javax.swing.JButton dealButton;
    private TableDrawPanel drawPanel;
    private javax.swing.JComboBox handsComboBox;
    // End of variables declaration

    int dealState = 0;
    
    /**
     * deal once
     */
    public void deal() {
    	if (dealer.isCompleted() && !dealer.isScored()) {
    		dealer.scoreHands();
    	} else {
    		dealer.deal();
    	}
    	
    	dealer.notifyObservers();
    	logger.debug("deal: " + dealer.toString());
    }
    
    Dealer dealer;

	public void setDealer(Dealer dealer) {
		this.dealer = dealer;
		dealer.addObserver(drawPanel);
	}
    
	public Dealer getDealer() {
		return dealer;
	}

	////////////////////////////////
	// test
	
	public static void main(String[] args) throws InterruptedException, IOException {
		final JFrame jFrame = new JFrame();;
		final DealPanel dealPanel = new DealPanel();
		
		jFrame.add(dealPanel);
		jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE );

		SwingUtilities.invokeLater(new Runnable() {
			
			@Override
			public void run() {
				jFrame.pack();
				jFrame.setVisible(true);
			}
			
		});
		
		// animation 
		// deal, flop, turn, river, score
		for (int i=0; i<5; i++) {
			Thread.sleep(1000);
			SwingUtilities.invokeLater(new Runnable() {

				@Override
				public void run() {
					dealPanel.deal();
				}
			});
		}
		
		
	}
	
    
}
